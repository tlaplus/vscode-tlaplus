{   "scopeName": "source.tlaplus",
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "TLA+",
    "foldingStartMarker": "\\\\* BEGIN TRANSLATION",
    "foldingStopMarker": "\\\\* END TRANSLATION",
    "patterns": [
        {
            "include": "#module"
        }
    ],
    "repository": {
        "pluscal": {
            "begin": "(\\(\\*.*)--((?:fair\\s+)?algorithm)\\b",
            "beginCaptures": {
                "1": {
                    "name": "comment.line"
                },
                "2": {
                    "name": "keyword.other"
                }
            },
            "end": "(?:(end\\s+algorithm)(?:;)?|\\})\\s*(\\*\\))",
            "endCaptures": {
                "1": {
                    "name": "keyword.other"
                },
                "2": {
                    "name": "comment.line"
                }
            },
            "patterns": [{
                "include": "source.tlaplus.pluscal"
            }]
        },
        "keywords": {
            "name": "keyword.other.tlaplus",
            "match": "\\b(?:EXTENDS|VARIABLE(S)?|LET|IN|EXCEPT|ENABLED|UNCHANGED|LAMBDA|DOMAIN|CONSTANT(S)?|CHOOSE|LOCAL|ASSUME|ASSUMPTION|AXIOM|RECURSIVE|INSTANCE|WITH|THEOREM|SUBSET|UNION|SF_|WF_|USE|DEFS|BY|DEF|SUFFICES|PROVE|OBVIOUS|NEW|QED|RECURSIVE|PICK|HIDE|DEFINE|WITNESS|HAVE|TAKE|PROOF|ACTION|COROLLARY|LEMMA|OMITTED|ONLY|PROPOSITION|STATE|TEMPORAL)\\b"
        },
        "control_keywords": {
            "name": "keyword.control.tlaplus",
            "match": "\\b(?:IF|THEN|ELSE|CASE|OTHER)\\b"
        },
        "embedded_operators": {
            "match": "\\\\[a-zA-Z]+\\b",
            "name": "keyword.operator.tlaplus"
        },
        "constants": {
            "name": "support.constant.tlaplus",
            "match": "\\b(?:TRUE|FALSE)\\b"
        },
        "numeric_constants": {
            "name": "support.constant.tlaplus",
            "match": "(?:\\b\\d+|\\\\(?:b|B)[01]+|\\\\(?:o|O)[0-7]+|\\\\(?:h|H)[0-9a-fA-F]+)\\b"
        },
        "strings": {
            "name": "string.quoted.doublte.tlaplus",
            "begin": "\"",
            "end": "\"",
            "patterns": [
                {
                    "name": "constant.character.escape.tlaplus",
                    "match": "\\\\."
                }
            ]
        },
        "line_comments": {
            "name": "comment.line",
            "begin": "\\\\\\*",
            "end": "$"
        },
        "block_comments": {
            "name": "comment.block",
            "begin": "\\(\\*",
            "end": "\\*\\)"
        },
        "lines": {
            "name": "comment.line",
            "match": "^\\s*-{4,}\\s*$"
        },
        "var_definitions": {
            "match": "(\\w+)\\s*==(?!\\s*INSTANCE|==)",
            "captures": {
                "1": {
                    "name": "support.type.primitive"
                }
            }
        },
        "postfix_operator_definitions": {
            "match": "(\\w+\\s*(\\^\\+|\\^\\*|\\^#))\\s*==(?!==)",
            "captures": {
                "1": {
                    "name": "variable.parameter"
                },
                "2": {
                    "name": "entity.name.function"
                }
            }
        },
        "binary_operator_definitions": {
            "match": "(\\w+\\s*(\\(?(?!\\\\\\*)[-<:>=&@/%#!X\\$\\*\\+\\.\\|\\?\\^\\\\]+\\)?|\\\\[a-z]+\\s)\\s*\\w+)\\s*==(?!==)",
            "captures": {
                "1": {
                    "name": "variable.parameter"
                },
                "2": {
                    "name": "entity.name.function"
                }
            }
        },
        "function_definitions": {
            "match": "(\\w+)\\s*\\[(.*(?<!=)==(?!=))",
            "captures": {
                "1": {
                    "name": "entity.name.function"
                },
                "2": {
                    "patterns": [{
                        "include": "source.tlaplus"
                    }]
                }
            }
        },
        "operators": {
            "match": "(\\w+)\\s*\\((?!\\*)",
            "captures": {
                "1": {
                    "name": "entity.name.function"
                }
            }
        },
        "inst_modules": {
            "match": "(\\w+)\\s*==\\s*(INSTANCE)\\b",
            "captures": {
                "1": {
                    "name": "entity.name.class"
                },
                "2": {
                    "name": "keyword.other"
                }
            }
        },
        "inst_module_refs": {
            "match": "\\b(\\w+\\s*!)(?=\\w)",
            "name": "entity.name.class"
        },
        "primed_operators": {
            "match": "\\b(\\w+')",
            "name": "variable.name"
        },
        "module": {
            "begin": "(\\s*-{4,}\\s*)(MODULE)\\s*(\\w+)\\s*(-{4,})",
            "beginCaptures": {
                "1": {
                    "name": "comment.line"
                },
                "2": {
                    "name": "keyword.other"
                },
                "3": {
                    "name": "entity.name.class"
                },
                "4": {
                    "name": "comment.line"
                }
            },
            "end": "(={4,}\\s*)",
            "endCaptures": {
                "1": {
                    "name": "comment.line"
                }
            },
            "patterns": [
                {
                    "include": "#module"
                },
                {
                    "include": "#pluscal"
                },
                {
                    "include": "#keywords"
                },
                {
                    "include": "#control_keywords"
                },
                {
                    "include": "#embedded_operators"
                },
                {
                    "include": "#strings"
                },
                {
                    "include": "#line_comments"
                },
                {
                    "include": "#block_comments"
                },
                {
                    "include": "#lines"
                },
                {
                    "include": "#constants"
                },
                {
                    "include": "#numeric_constants"
                },
                {
                    "include": "#var_definitions"
                },
                {
                    "include": "#postfix_operator_definitions"
                },
                {
                    "include": "#binary_operator_definitions"
                },
                {
                    "include": "#function_definitions"
                },
                {
                    "include": "#operators"
                },
                {
                    "include": "#inst_modules"
                },
                {
                    "include": "#inst_module_refs"
                },
                {
                    "include": "#primed_operators"
                },
                {
                    "include": "#except_vars"
                }
            ]
        },
        "except_vars": {
            "match": "(?<=EXCEPT.*[^@])(@|!)(?!@)",
            "name": "variable.name"
        }
    }
}
