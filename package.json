{
    "name": "vscode-ide",
    "displayName": "TLA+ (Temporal Logic of Actions)",
    "version": "1.7.0",
    "description": "TLA+ language support",
    "publisher": "tlaplus",
    "license": "MIT",
    "author": {
        "name": "TLA+ Community"
    },
    "engines": {
        "vscode": "^1.95.0"
    },
    "categories": [
        "Programming Languages",
        "Snippets",
        "Formatters",
        "Other",
        "Debuggers"
    ],
    "repository": {
        "type": "git",
        "url": "https://github.com/tlaplus/vscode-tlaplus.git"
    },
    "bugs": {
        "url": "https://github.com/tlaplus/vscode-tlaplus/issues"
    },
    "icon": "resources/images/tlaplus.png",
    "keywords": [
        "TLA+",
        "PlusCal",
        "TLC",
        "Formal models",
        "Specification",
        "Modeling"
    ],
    "activationEvents": [
        "workspaceContains:**/*.tla"
    ],
    "main": "./out/main.js",
    "browser": "./out/main.browser.js",
    "contributes": {
        "terminal": {
            "profiles": [
                {
                    "title": "TLA+ REPL",
                    "id": "tlaplus.repl.run"
                }
            ]
        },
        "debuggers": [
            {
                "type": "tlaplus",
                "label": "TLA+ Debug"
            }
        ],
        "breakpoints": [
            {
                "language": "tlaplus"
            }
        ],
        "languages": [
            {
                "id": "tlaplus",
                "aliases": [
                    "TLA+",
                    "tlaplus"
                ],
                "extensions": [
                    ".tla"
                ],
                "configuration": "./languages/tlaplus-lang-config.json"
            },
            {
                "id": "pluscal",
                "aliases": [
                    "PlusCal",
                    "pluscal"
                ],
                "extensions": [],
                "configuration": "./languages/pluscal-lang-config.json"
            },
            {
                "id": "tlaplus_cfg",
                "aliases": [],
                "extensions": [
                    ".cfg"
                ],
                "configuration": "./languages/cfg-lang-config.json"
            },
            {
                "id": "tlaplus_out",
                "extensions": [
                    ".out"
                ]
            },
            {
                "id": "tlaplus_ndjson",
                "extensions": [
                    ".ndjson"
                ]
            }
        ],
        "grammars": [
            {
                "language": "tlaplus",
                "scopeName": "source.tlaplus",
                "path": "./languages/tlaplus-grammar.json"
            },
            {
                "language": "pluscal",
                "scopeName": "source.tlaplus.pluscal",
                "path": "./languages/pluscal-grammar.json"
            },
            {
                "language": "tlaplus_cfg",
                "scopeName": "source.tlaplus.cfg",
                "path": "./languages/cfg-grammar.json"
            },
            {
                "language": "tlaplus_out",
                "scopeName": "source.tlaplus.out",
                "path": "./languages/out-grammar.json"
            }
        ],
        "languageModelTools": [
            {
                "name": "chat-tools-tlaplus_sany_parse",
                "canBeReferencedInPrompt": true,
                "toolReferenceName": "tlaplus_parse",
                "userDescription": "Parse the TLA+ module using SANY provided as an input file.",
                "modelDescription": "Parse the TLA+ module provided as an input file with SANY from the TLA+ tools. Use this tool when you need to parse a TLA+ module and check for syntax and level-checking errors.",
                "displayName": "TLA+: Parse module",
                "tags": [
                    "editors",
                    "chat-tools-tlaplus"
                ],
                "icon": "$(files)",
                "inputSchema": {
                    "type": "object",
                    "properties": {
                        "fileName": {
                            "type": "string",
                            "description": "The full path to the file containing the TLA+ module to parse."
                        }
                    },
                    "required": [
                        "fileName"
                    ]
                }
            },
            {
                "name": "chat-tools-tlaplus_sany_symbol",
                "canBeReferencedInPrompt": true,
                "toolReferenceName": "tlaplus_symbol",
                "userDescription": "TLA+: List all symbols in a TLA+ module.",
                "modelDescription": "Extract all symbols from the given TLA+ module. Use this tool when you need to identify the symbols defined in a TLA+ specâ€”for example, when generating a TLC configuration file. It helps you determine the list of CONSTANTS, the initialization predicate, the next-state relation, the overall behavior specification (Spec), and any defined safety or liveness properties.",
                "displayName": "TLA+: List all symbols",
                "tags": [
                    "editors",
                    "chat-tools-tlaplus"
                ],
                "icon": "$(files)",
                "inputSchema": {
                    "type": "object",
                    "properties": {
                        "fileName": {
                            "type": "string",
                            "description": "The full path to the file containing the TLA+ module."
                        }
                    },
                    "required": [
                        "fileName"
                    ]
                }
            },
            {
                "name": "chat-tools-tlaplus_tlc_smoke",
                "canBeReferencedInPrompt": true,
                "toolReferenceName": "tlaplus_smoke",
                "userDescription": "Smoke test the TLA+ module using TLC with the provided input file. ",
                "modelDescription": "Smoke test the TLA+ module using TLC with the provided input file. Smoke testing is a lightweight verification method that runs TLC to randomly generate as many behaviors as possible within a specified time limit. Unlike exhaustive model checking, it does not explore the entire state space.  If no counterexample is found during smoke testing, this does not guarantee that the module is correct. However, if a counterexample is found, it proves that the module violates at least one of its properties. Note that, unlike in exhaustive model checking, any counterexample found may not be minimal. \"Smoke testing\" is defined to be running TLC's simulation under a tight time budget.",
                "displayName": "TLA+: Smoke Test model",
                "tags": [
                    "editors",
                    "chat-tools-tlaplus"
                ],
                "icon": "$(files)",
                "inputSchema": {
                    "type": "object",
                    "properties": {
                        "fileName": {
                            "type": "string",
                            "description": "The full path to the file containing the TLA+ module to parse."
                        }
                    },
                    "required": [
                        "fileName"
                    ]
                }
            },
            {
                "name": "chat-tools-tlaplus_tlc_check",
                "canBeReferencedInPrompt": true,
                "toolReferenceName": "tlaplus_check",
                "userDescription": "Exhaustively model-check the TLA+ module provided as an input file with TLC.",
                "modelDescription": "Exhaustively model-check the TLA+ module provided as an input file with TLC. Model checking is a formal verification technique that systematically explores the state space of a system to ensure its correctness. It can be used to check safety and liveness properties, as well as to find counterexamples. Due to state-space explostion, model checking may take a long time, and it may be impossible to check large models exhaustively.",
                "displayName": "TLA+: Check model with TLC",
                "tags": [
                    "editors",
                    "chat-tools-tlaplus"
                ],
                "icon": "$(files)",
                "inputSchema": {
                    "type": "object",
                    "properties": {
                        "fileName": {
                            "type": "string",
                            "description": "The full path to the file containing the TLA+ module to parse."
                        }
                    },
                    "required": [
                        "fileName"
                    ]
                }
            }
        ],
        "commands": [
            {
                "command": "tlaplus.parse",
                "title": "Parse module",
                "category": "TLA+"
            },
            {
                "command": "tlaplus.exportToTex",
                "title": "Export module to LaTeX",
                "category": "TLA+"
            },
            {
                "command": "tlaplus.exportToPdf",
                "title": "Export module to PDF",
                "category": "TLA+"
            },
            {
                "command": "tlaplus.model.check.run",
                "title": "Check model with TLC",
                "category": "TLA+"
            },
            {
                "command": "tlaplus.model.check.customRun",
                "title": "Check model with TLC using non-default config...",
                "category": "TLA+"
            },
            {
                "command": "tlaplus.model.check.runAgain",
                "title": "Run last model check again",
                "category": "TLA+"
            },
            {
                "command": "tlaplus.model.check.stop",
                "title": "Stop model checking process",
                "category": "TLA+"
            },
            {
                "command": "tlaplus.model.check.display",
                "title": "Display model checking panel",
                "category": "TLA+"
            },
            {
                "command": "tlaplus.out.visualize",
                "title": "Visualize TLC output",
                "category": "TLA+"
            },
            {
                "command": "tlaplus.coverage.visualize",
                "title": "Visualize simulation coverage",
                "category": "TLA+"
            },
            {
                "command": "tlaplus.evaluateSelection",
                "title": "Evaluate selected expression",
                "category": "TLA+",
                "enablement": "editorHasSelection"
            },
            {
                "command": "tlaplus.evaluateExpression",
                "title": "Evaluate expression...",
                "category": "TLA+"
            },
            {
                "command": "tlaplus.debugger.run",
                "title": "Check and debug model with TLC",
                "enablement": "!inDebugMode",
                "icon": "$(debug-alt)",
                "category": "TLA+"
            },
            {
                "command": "tlaplus.debugger.customRun",
                "title": "Check and debug model with TLC using non-default config...",
                "enablement": "!inDebugMode",
                "icon": "$(debug-alt)",
                "category": "TLA+"
            },
            {
                "command": "tlaplus.debugger.attach",
                "title": "Debug a running model",
                "enablement": "!inDebugMode",
                "category": "TLA+"
            },
            {
                "command": "tlaplus.repl.run",
                "title": "Run REPL in Terminal",
                "category": "TLA+"
            },
            {
                "command": "tlaplus.tlaps.check-step",
                "title": "Check proof step in TLAPS",
                "category": "TLA+"
            },
            {
                "command": "tlaplus.tlc.profiler.toggle",
                "title": "Toggle Coverage Visualization",
                "category": "TLA+",
                "icon": "$(flame)"
            },
            {
                "command": "tlaplus.tlc.profiler.clear",
                "title": "Clear Coverage Data",
                "category": "TLA+"
            }
        ],
        "snippets": [
            {
                "language": "tlaplus",
                "scopeName": "source.tlaplus.pluscal",
                "path": "./languages/pluscal-snippets.json"
            },
            {
                "language": "tlaplus",
                "scopeName": "source.tlaplus",
                "path": "./languages/tlaplus-snippets.json"
            }
        ],
        "menus": {
            "commandPalette": [
                {
                    "command": "tlaplus.parse",
                    "when": "editorLangId == tlaplus"
                },
                {
                    "command": "tlaplus.exportToTex",
                    "when": "editorLangId == tlaplus"
                },
                {
                    "command": "tlaplus.exportToPdf",
                    "when": "editorLangId == tlaplus"
                },
                {
                    "command": "tlaplus.model.check.run",
                    "when": "editorLangId == tlaplus || editorLangId == tlaplus_cfg"
                },
                {
                    "command": "tlaplus.model.check.runAgain",
                    "when": "tlaplus.tlc.canRunAgain"
                },
                {
                    "command": "tlaplus.model.check.customRun",
                    "when": "editorLangId == tlaplus"
                },
                {
                    "command": "tlaplus.model.check.stop",
                    "when": "tlaplus.tlc.isRunning"
                },
                {
                    "command": "tlaplus.out.visualize",
                    "when": "resourceExtname == .out"
                },
                {
                    "command": "tlaplus.evaluateSelection",
                    "when": "editorLangId == tlaplus"
                },
                {
                    "command": "tlaplus.evaluateExpression",
                    "when": "editorLangId == tlaplus"
                },
                {
                    "command": "tlaplus.debugger.run",
                    "when": "editorLangId == tlaplus || editorLangId == tlaplus_cfg"
                },
                {
                    "command": "tlaplus.debugger.attach"
                },
                {
                    "command": "tlaplus.repl.run"
                }
            ],
            "explorer/context": [
                {
                    "command": "tlaplus.model.check.run",
                    "when": "resourceLangId == tlaplus || resourceLangId == tlaplus_cfg",
                    "group": "z_commands"
                }
            ],
            "editor/context": [
                {
                    "command": "tlaplus.model.check.run",
                    "when": "editorLangId == tlaplus || editorLangId == tlaplus_cfg",
                    "group": "z_commands@10"
                },
                {
                    "command": "tlaplus.debugger.run",
                    "when": "editorLangId == tlaplus || editorLangId == tlaplus_cfg",
                    "group": "z_commands@20"
                },
                {
                    "command": "tlaplus.out.visualize",
                    "when": "resourceExtname == .out",
                    "group": "z_commands"
                },
                {
                    "command": "tlaplus.evaluateSelection",
                    "when": "editorLangId == tlaplus",
                    "group": "z_commands"
                }
            ],
            "editor/title": [
                {
                    "command": "tlaplus.debugger.run",
                    "when": "resourceLangId == tlaplus || editorLangId == tlaplus_cfg",
                    "group": "1_run@20"
                },
                {
                    "command": "tlaplus.tlc.profiler.toggle",
                    "when": "resourceExtname == .tla",
                    "group": "navigation"
                }
            ]
        },
        "configuration": {
            "type": "object",
            "title": "TLA+",
            "properties": {
                "tlaplus.java.home": {
                    "type": "string",
                    "scope": "window",
                    "default": "",
                    "markdownDescription": "Path to Java 11 (or higher) home directory that should be used to run TLA+ tools (akin to JAVA_HOME). [More info](https://docs.tlapl.us/using:vscode:installing_java#configure_the_extension)",
                    "maxLength": 1000
                },
                "tlaplus.java.options": {
                    "type": "string",
                    "scope": "window",
                    "default": "",
                    "markdownDescription": "Java options to use when running TLA+ tools. [How it works.](https://github.com/tlaplus/vscode-tlaplus/wiki/Java-Options)",
                    "maxLength": 1000
                },
                "tlaplus.pluscal.options": {
                    "type": "string",
                    "scope": "window",
                    "default": "",
                    "description": "Additional options to pass to PlusCal transpiler.",
                    "maxLength": 1000
                },
                "tlaplus.tlc.modelChecker.options": {
                    "type": "string",
                    "scope": "window",
                    "default": "",
                    "markdownDescription": "Additional options to pass to TLC. Full list of available parameters is [here](https://github.com/tlaplus/tlaplus/blob/master/general/docs/current-tools.md).",
                    "maxLength": 1000
                },
                "tlaplus.tlc.modelChecker.optionsPrompt": {
                    "type": "boolean",
                    "scope": "window",
                    "default": true,
                    "description": "Show prompt for TLC options each time model checking is run."
                },
                "tlaplus.tlc.modelChecker.createOutFiles": {
                    "type": "boolean",
                    "scope": "window",
                    "default": true,
                    "description": "Send TLC output to .out file."
                },
                "tlaplus.tlc.modelChecker.preserveEditorFocus": {
                    "type": "boolean",
                    "scope": "window",
                    "default": true,
                    "description": "When enabled, keeps focus on the editor after opening the TLC model checker window."
                },
                "tlaplus.tlc.statisticsSharing": {
                    "type": "string",
                    "scope": "machine",
                    "default": "doNotShare",
                    "markdownDescription": "Allows you to send the TLC usage statistics to [the publicly available database](https://exec-stats.tlapl.us). You can find more details on what is shared [here](https://github.com/tlaplus/tlaplus/blob/master/tlatools/org.lamport.tlatools/src/util/ExecutionStatisticsCollector.md).",
                    "enum": [
                        "share",
                        "shareWithoutId",
                        "doNotShare"
                    ],
                    "enumDescriptions": [
                        "TLC statistics will be shared along with the installation ID.",
                        "TLC statistics will be shared without the installation ID.",
                        "No TLC statistics will be shared."
                    ]
                },
                "tlaplus.mcp.port": {
                    "type": "number",
                    "scope": "machine",
                    "default": -1,
                    "markdownDescription": "Listening port for TLA+ MCP server. If set to -1, MCP server will be disabled. Restart VSCode to apply changes."
                },
                "tlaplus.pdf.convertCommand": {
                    "default": "pdflatex",
                    "type": "string",
                    "scope": "application",
                    "maxLength": 1000,
                    "description": "Command to produce PDFs from .tex files."
                },
                "tlaplus.pdf.commentsShade": {
                    "default": true,
                    "type": "boolean",
                    "scope": "application",
                    "description": "If enabled, comments will have a gray background."
                },
                "tlaplus.pdf.commentsShadeColor": {
                    "default": 0.85,
                    "type": "number",
                    "scope": "application",
                    "maxLength": 10,
                    "description": "If comments are shaded in gray, this config changes the darkness of the shading. This must be a number between 0.0 (completely black) and 1.0 (no shading)."
                },
                "tlaplus.pdf.numberLines": {
                    "default": false,
                    "type": "boolean",
                    "scope": "application",
                    "description": "Show line numbers in PDFs."
                },
                "tlaplus.pdf.noPcalShade": {
                    "default": false,
                    "type": "boolean",
                    "scope": "application",
                    "description": "Causes a PlusCal algorithm (which appear in a comment) not to be shaded.  (The algorithm's comments will be shaded.)"
                },
                "tlaplus.tlaps.enabled": {
                    "type": "boolean",
                    "default": false,
                    "description": "Enable TLAPS integration."
                },
                "tlaplus.tlaps.lspServerCommand": {
                    "type": "array",
                    "items": {"type": "string"},
                    "description": "Command and arguments to start a TLAPS LSP server.",
                    "default": ["opam", "exec", "--", "tlapm_lsp", "--log-io", "--log-to=/tmp/tlapm_lsp.log"]
                },
                "tlaplus.tlaps.wholeLine": {
                    "type": "boolean",
                    "default": true,
                    "description": "Mark proof step states using whole line."
                },
                "tlaplus.moduleSearchPaths": {
                    "type": "array",
                    "items": {"type": "string"},
                    "description": "Additional paths to look for TLA+ modules. Standard TLA+ modules and Community Modules are included automatically.",
                    "default": []
                },
                "tlaplus.tlc.profiler.enabled": {
                    "type": "boolean",
                    "default": false,
                    "description": "Enable TLC coverage visualization by default"
                },
                "tlaplus.tlc.profiler.baseColor": {
                    "type": "string",
                    "default": "#ff0000",
                    "format": "color",
                    "description": "Base color for coverage heat map"
                },
                "tlaplus.tlc.profiler.relativeScale": {
                    "type": "boolean",
                    "default": false,
                    "description": "Use relative scaling (percentage of max) instead of absolute execution counts"
                },
                "tlaplus.tlc.profiler.wholeLine": {
                    "type": "boolean",
                    "default": false,
                    "description": "Highlight whole lines instead of just the action text"
                },
                "tlaplus.tlc.profiler.showGutterIcons": {
                    "type": "boolean",
                    "default": true,
                    "description": "Show coverage icons in the gutter"
                },
                "tlaplus.tlc.profiler.thresholds": {
                    "type": "object",
                    "default": {
                        "rare": 10,
                        "low": 100,
                        "medium": 1000,
                        "high": 10000
                    },
                    "description": "Execution count thresholds for coverage levels"
                }
            }
        },
        "configurationDefaults": {
            "[tlaplus]": {
                "editor.insertSpaces": true,
                "editor.tabSize": 4,
                "editor.formatOnType": true,
                "editor.detectIndentation": false
            },
            "[tlaplus_cfg]": {
                "editor.insertSpaces": true,
                "editor.tabSize": 4,
                "editor.formatOnType": true,
                "editor.detectIndentation": false
            }
        },
        "colors": [
            {
                "id": "tlaplus.tlaps.proofState.proved",
                "description": "Background for a proved sequent.",
                "defaults": {
                    "dark": "#00ff0020",
                    "light": "#00ff0020",
                    "highContrast": "#00ff0050"
                }
            },
            {
                "id": "tlaplus.tlaps.proofState.failed",
                "description": "Background for a failed to prove sequent.",
                "defaults": {
                    "dark": "#ff000030",
                    "light": "#ff000030",
                    "highContrast": "#ff000060"
                }
            },
            {
                "id": "tlaplus.tlaps.proofState.omitted",
                "description": "Background for a sequent with omitted proof.",
                "defaults": {
                    "dark": "#ff660020",
                    "light": "#ff660020",
                    "highContrast": "#ff660050"
                }
            },
            {
                "id": "tlaplus.tlaps.proofState.missing",
                "description": "Background for a sequent with no proof.",
                "defaults": {
                    "dark": "#ff660020",
                    "light": "#ff660020",
                    "highContrast": "#ff660050"
                }
            },
            {
                "id": "tlaplus.tlaps.proofState.pending",
                "description": "Background for a sequent whose proof was not checked yet.",
                "defaults": {
                    "dark": "#c8c8c820",
                    "light": "#c8c8c820",
                    "highContrast": "#c8c8c850"
                }
            },
            {
                "id": "tlaplus.tlaps.proofState.progress",
                "description": "Background for a sequent which is currently being checked.",
                "defaults": {
                    "dark": "#d8d8d820",
                    "light": "#d8d8d820",
                    "highContrast": "#d8d8d850"
                }
            }
        ],
        "viewsContainers": {
            "activitybar": [
                {
                    "id": "tlaplus",
                    "title": "TLA+",
                    "icon": "resources/images/tlaplus.svg"
                }
            ]
        },
        "views": {
            "tlaplus": [
                {
                    "id": "tlaplus.current-proof-step",
                    "name": "Current Proof Step",
                    "type": "webview",
                    "icon": "resources/images/tlaplus.svg"
                },
                {
                    "id": "tlaplus.module-search-paths",
                    "name": "Module Search Paths",
                    "type": "tree",
                    "icon": "resources/images/tlaplus.svg"
                }
            ]
        }
    },
    "scripts": {
        "vscode:prepublish": "npm run compile -- --production",
        "compile": "node ./esbuild.js",
        "lint": "eslint --ext .ts,.tsx src/ tests/",
        "lint:fix": "eslint --fix --ext .ts,.tsx src/ tests/",
        "watch": "npm run compile -- --watch",
        "pretest": "tsc -p ./",
        "test": "node ./out/tests/runTest.js",
        "test:tlaplus-grammar": "vscode-tmgrammar-test ./tests/suite/languages/*.tla -g ./languages/tlaplus-grammar.json -g ./languages/pluscal-grammar.json"
    },
    "devDependencies": {
        "@types/express": "^5.0.2",
        "@types/glob": "^8.1.0",
        "@types/mocha": "^10.0.1",
        "@types/node": "^18.15.0",
        "@types/react": "^18.2.6",
        "@types/react-dom": "^18.2.4",
        "@types/vscode": "^1.95.0",
        "@typescript-eslint/eslint-plugin": "^5.59.5",
        "@typescript-eslint/parser": "^5.59.5",
        "@vscode/debugadapter-testsupport": "^1.63.0",
        "@vscode/test-electron": "^2.3.8",
        "esbuild": "^0.17.19",
        "eslint": "^8.40.0",
        "glob": "^8.1.0",
        "mocha": "^10.2.0",
        "node": "^18.15.0",
        "source-map-support": "^0.5.19",
        "typescript": "^5.0.4",
        "vscode-tmgrammar-test": "^0.1.1"
    },
    "dependencies": {
        "@microsoft/fast-components": "^2.30.6",
        "@microsoft/fast-react-wrapper": "^0.3.18",
        "@modelcontextprotocol/sdk": "^1.11.2",
        "@vscode/codicons": "^0.0.33",
        "@vscode/debugadapter": "^1.63.0",
        "@vscode/webview-ui-toolkit": "^1.2.2",
        "chart.js": "^4.4.1",
        "react-chartjs-2": "^5.2.0",
        "vscode-languageclient": "^9.0.0",
        "await-notify": "^1.0.1",
        "express": "^5.1.0",
        "fast-xml-parser": "^5.2.1",
        "moment": "^2.29.4",
        "react": "^18.2.0",
        "react-dom": "^18.2.0",
        "@cocalc/ansi-to-react": "^7.0.0",
        "vscode-uri": "^3.0.7",
        "zod": "^3.24.4"
    }
}
